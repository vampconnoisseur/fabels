generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id            String   @id @default(cuid())
  thumbnail     String
  title         String
  description   String
  genre         String
  tags          String[]
  publisher     String
  authors       String[]
  price         Float
  s3Url         String
  sales         Int      @default(0)
  buyers        User[]   @relation("PurchasedBooks")
  ratings       Rating[]
  releaseDate   DateTime @default(now())
  averageRating Int      @default(0)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?     @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  cart           Cart?         @relation("UserCart")
  transactions   Transaction[]
  purchasedBooks Book[]        @relation("PurchasedBooks")
  isAdmin        Boolean       @default(false)
  ratings        Rating[]
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int      @default(0)
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Cart {
  id      String   @id @default(cuid())
  userId  String   @unique
  bookIds String[]
  user    User     @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  bookIds   String[]
  timestamp DateTime @default(now())
  price     Float
  user      User     @relation(fields: [userId], references: [id])
}
